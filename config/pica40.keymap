#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27  // left-hand keys
#define KEYS_R 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33  // right-hand keys
#define THUMBS 34 35 36 37 38 39


#define QWERTY 0
#define NAV 1
#define NUM 2
#define SYM 3
#define FUNC 4
#define SYS 5

&lt {
    tapping-term-ms = <200>;
};

&mt {
    tapping-term-ms = <150>;
};

/{
    macros {
        nvd: next_virtual_desctop {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <macro_tap &kp LGUI &kp LCTRL &kp RIGHT>;
        };
        pvd: prev_virtual_desctop {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <macro_tap &kp LGUI &kp LCTRL &kp LEFT>;
        };

        voa: view_open_apps {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <macro_tap &kp LCTRL &kp LALT &kp TAB>
                ;
        };

        alt_tab: alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <macro_tap &kp LALT &kp TAB>
                ;
        };

        togl_lang: togl_lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp LSHFT>
                , <&macro_release &kp LALT>
                ;
        };
    };





    keymap {
        compatible = "zmk,keymap";

        default_layer { 
            bindings = <
                        &kp Q       &kp W       &kp E           &kp R               &kp T                &kp Y       &kp U       &kp I       &kp O       &kp P 
            &kp TAB   &kp A       &kp S       &kp D           &kp F        &kp G                &kp H      &kp J       &kp K       &kp L       &kp SEMI    &kp SQT
            &kp LCTRL   &kp Z       &kp X       &kp C           &kp V               &kp B                &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH    &kp ESC 
                                                &lt 1 ESC       &tog FUNC           &mt LALT ENTER            &kp SPACE   &lt NUM BSPC    &kp RALT                    
                        >;
        };

        nav_layer { 
            bindings = <
                        &none       &none       &none       &none      &none                &none            &none              &none           &none           &none 
            &kp LSHFT   &none       &none       &none       &none      &none                &mt HOME LEFT    &mt PG_DN DOWN     &mt PG_UP UP    &mt END RIGHT   &none     &none 
            &kp LCTRL   &none       &none       &none       &none      &none                &none            &none              &none           &none           &none     &none  
                                                &none       &none      &none                &none            &none              &none                     
                        >;
        };

        num_layer { 
            bindings = <
                            &kp KP_EQUAL        &kp N7       &kp N8       &kp N9      &kp K_CALC           &kp Y       &kp U       &kp I       &kp O       &kp P 
            &kp LSHFT       &kp KP_MULTIPLY     &kp N4       &kp N5       &kp N6      &kp KP_PLUS                &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &kp SEMI    &kp SQT
            &kp LCTRL       &kp KP_DIVIDE       &kp N1       &kp N2       &kp N3      &kp KP_MINUS               &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH    &kp ESC 
                                                             &none        &none       &kp SPACE            &kp ENTER   &kp BSPC    &kp RALT                    
                        >;
        };

        sum_layer { 
            bindings = <
                        &none       &none       &none       &none      &none                &kp Y       &kp U       &kp I       &kp O       &kp P 
            &none       &none       &none       &none       &none      &none                &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &kp SEMI    &kp SQT
            &none       &none       &none       &none       &none      &none                &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH    &kp ESC 
                                                &kp LGUI    &mo 1      &kp SPACE            &kp ENTER   &kp BSPC    &kp RALT                    
                        >;
        };

        func_layer { 
            bindings = <
                        &kp C_AC_VIEW_TOGGLE    &none               &none           &none           &none                &kp Y       &kp U       &kp I       &kp O       &kp P 
            &none       &kp ALT_ERASE           &pvd                &nvd            &togl_lang      &kp PSCRN            &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &kp SEMI    &kp SQT
            &none       &none                   &LEFT               &voa            &RIGHT          &alt_tab             &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH    &kp ESC 
                                                                    &kp LGUI        &mo 1           &kp SPACE            &kp ENTER   &kp BSPC    &kp RALT                    
                        >;
        };

        sys_layer { 
            bindings = <
                        &none       &none       &none       &none      &none                &kp Y       &kp U       &kp I       &kp O       &kp P 
            &none       &none       &none       &none       &none      &none                &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &kp SEMI    &kp SQT
            &none       &none       &none       &none       &none      &none                &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH    &kp ESC 
                                                &kp LGUI    &mo 1      &kp SPACE            &kp ENTER   &kp BSPC    &kp RALT                    
                        >;
        };
        
    };
};
